/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mypackage;

import arvores.ArvoreAvl;
import arvores.ArvoreAvlAlt;
import arvores.ArvoreBinaria;
import arvores.ArvoreBinariaAlt;
import estuturas_simples.Busca;
import estuturas_simples.Sort;
import estuturas_simples.Vetor;
import estuturas_simples.Cores;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author lab8309
 */
public class Janela extends javax.swing.JFrame {

    /**
     * Creates new form Janela
     */
    public Janela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    List<Thread> threadsSort = new ArrayList<>();
    List<Thread> threadsArvore = new ArrayList<>();
    List<Thread> threadsBusca = new ArrayList<>();

    DefaultTableModel modeloOrdenacao = null;
    DefaultTableModel modeloCriaArvore = null;
    DefaultTableModel modeloBusca = null;
    DefaultTableModel modeloPapOrdenacao = null;
    static DefaultTableModel modeloVisualOrdenacao = null;

    Vetor vetor = null;
    Thread geraVetor = null;

    ArvoreBinaria arvoreBin = new ArvoreBinaria();
    ArvoreBinariaAlt arvoreBinAlt = new ArvoreBinariaAlt();
    ArvoreAvl arvoreBal = new ArvoreAvl();
    ArvoreAvlAlt arvoreBalAlt = new ArvoreAvlAlt();

    Sort bubble = null;
    Sort selection = null;
    Sort insertion = null;
    Sort quick = null;

    static Sort bubbleVisual = null;
    Sort selectionVisual = null;
    Sort insertionVisual = null;
    Sort quickVisual = null;

    static int[] vetorSort = null;

    Sort bubblePap = null;
    Sort selectionPap = null;
    Sort insertionPap = null;
    Sort quickPap = null;

    Thread ThreadPap = null;
    Thread ThreadVisual = null;

    Busca busca = null;
    double valorBusca = 0;
    Item selectedBusca = null;

    boolean proc_multi = false;


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo_combo_proc = new javax.swing.ButtonGroup();
        grupo_combo_pap = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        botaoIniciar = new javax.swing.JButton();
        check_ordenar = new javax.swing.JCheckBox();
        check_bubble = new javax.swing.JCheckBox();
        check_selection = new javax.swing.JCheckBox();
        check_insertion = new javax.swing.JCheckBox();
        check_quick = new javax.swing.JCheckBox();
        check_criaArvores = new javax.swing.JCheckBox();
        check_criaBin = new javax.swing.JCheckBox();
        check_criaAVL = new javax.swing.JCheckBox();
        check_criaAVLAlt = new javax.swing.JCheckBox();
        check_criaBinAlt = new javax.swing.JCheckBox();
        label_numElem = new javax.swing.JLabel();
        campo_num = new javax.swing.JTextField();
        botao_gerar = new javax.swing.JButton();
        barraProgresso = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        label_numElem6 = new javax.swing.JLabel();
        botao_busca = new javax.swing.JButton();
        combo_busca = new javax.swing.JComboBox<>();
        radio_lote = new javax.swing.JRadioButton();
        radio_multi = new javax.swing.JRadioButton();
        tab = new javax.swing.JTabbedPane();
        painel_tempoexec = new javax.swing.JPanel();
        label_numElem4 = new javax.swing.JLabel();
        scroll_cria = new javax.swing.JScrollPane();
        tabela_criaArv = new javax.swing.JTable();
        label_numElem5 = new javax.swing.JLabel();
        scroll_busca = new javax.swing.JScrollPane();
        tabela_buscaArv = new javax.swing.JTable();
        botao_limpaSort = new javax.swing.JButton();
        botao_limpaCria = new javax.swing.JButton();
        botao_limpaBusca = new javax.swing.JButton();
        label_numElem1 = new javax.swing.JLabel();
        scroll_sort = new javax.swing.JScrollPane();
        tabela_ordenacao = new javax.swing.JTable();
        painel_visual = new javax.swing.JPanel();
        label_numElem2 = new javax.swing.JLabel();
        scroll_visual = new javax.swing.JScrollPane();
        tabela_visual = new javax.swing.JTable();
        botao_limpaVisual = new javax.swing.JButton();
        scroll_buscaPap = new javax.swing.JScrollPane();
        tabela_pap = new javax.swing.JTable();
        label_numElem8 = new javax.swing.JLabel();
        botao_limpaPap = new javax.swing.JButton();
        radio_bubble = new javax.swing.JRadioButton();
        radio_selection = new javax.swing.JRadioButton();
        radio_insertion = new javax.swing.JRadioButton();
        radio_quick = new javax.swing.JRadioButton();
        slider_velocidade = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        botao_demonstrar = new javax.swing.JButton();
        botao_cancelaVisual = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));

        botaoIniciar.setText("Iniciar");
        botaoIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIniciarActionPerformed(evt);
            }
        });
        botaoIniciar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                botaoIniciarPropertyChange(evt);
            }
        });

        check_ordenar.setText("Ordenar");
        check_ordenar.setEnabled(false);
        check_ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_ordenarActionPerformed(evt);
            }
        });

        check_bubble.setText("Bubble Sort");
        check_bubble.setEnabled(false);
        check_bubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_bubbleActionPerformed(evt);
            }
        });

        check_selection.setText("Selection Sort");
        check_selection.setEnabled(false);
        check_selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_selectionActionPerformed(evt);
            }
        });

        check_insertion.setText("Insertion Sort");
        check_insertion.setEnabled(false);
        check_insertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_insertionActionPerformed(evt);
            }
        });

        check_quick.setText("Quick Sort");
        check_quick.setEnabled(false);
        check_quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_quickActionPerformed(evt);
            }
        });

        check_criaArvores.setText("Criar árvores");
        check_criaArvores.setEnabled(false);
        check_criaArvores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaArvoresActionPerformed(evt);
            }
        });

        check_criaBin.setText("Binária (Bianchi)");
        check_criaBin.setEnabled(false);
        check_criaBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaBinActionPerformed(evt);
            }
        });

        check_criaAVL.setText("Balanceada AVL (Bianchi)");
        check_criaAVL.setEnabled(false);
        check_criaAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaAVLActionPerformed(evt);
            }
        });

        check_criaAVLAlt.setText("Balanceada AVL (Autor Desconhecido)");
        check_criaAVLAlt.setEnabled(false);
        check_criaAVLAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaAVLAltActionPerformed(evt);
            }
        });

        check_criaBinAlt.setText("Binária (Autor Desconhecido)");
        check_criaBinAlt.setEnabled(false);
        check_criaBinAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaBinAltActionPerformed(evt);
            }
        });

        label_numElem.setText("Número de elementos:");

        campo_num.setToolTipText("");
        campo_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo_numActionPerformed(evt);
            }
        });

        botao_gerar.setText("Gerar");
        botao_gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_gerarActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        label_numElem6.setText("Buscar elemento:");

        botao_busca.setText("Buscar");
        botao_busca.setEnabled(false);
        botao_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_buscaActionPerformed(evt);
            }
        });

        combo_busca.setEnabled(false);
        combo_busca.addItem(new Item(0, "Primeiro", 0));
        combo_busca.addItem(new Item(0, "Último", 0));
        combo_busca.addItem(new Item(0, "Menor", 0));
        combo_busca.addItem(new Item(0, "Maior", 0));
        combo_busca.addItem(new Item(0, "Nao possui", 0));
        combo_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_buscaActionPerformed(evt);
            }
        });

        grupo_combo_proc.add(radio_lote);
        radio_lote.setSelected(true);
        radio_lote.setText("Lote");

        grupo_combo_proc.add(radio_multi);
        radio_multi.setText("Multiprogramação");

        tab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabStateChanged(evt);
            }
        });

        label_numElem4.setText("Criação da árvore:");

        tabela_criaArv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Quant", "Tipo", "Tempo"
            }
        ));
        scroll_cria.setViewportView(tabela_criaArv);
        if (tabela_criaArv.getColumnModel().getColumnCount() > 0) {
            tabela_criaArv.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            tabela_criaArv.getColumnModel().getColumn(1).setHeaderValue("Title 2");
        }
        TableColumnModel columnModelArv = tabela_criaArv.getColumnModel();
        TableColumn coluna1A = columnModelArv.getColumn(0);
        coluna1A.setPreferredWidth(50);

        DefaultTableCellRenderer rightRendererA = new DefaultTableCellRenderer();
        rightRendererA.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);

        TableColumn coluna3A = columnModelArv.getColumn(2);
        coluna3A.setCellRenderer(rightRendererA);;

        label_numElem5.setText("Busca na árvore:");

        tabela_buscaArv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Posição", "Tipo", "Tempo"
            }
        ));
        scroll_busca.setViewportView(tabela_buscaArv);
        TableColumnModel columnModelBusca = tabela_buscaArv.getColumnModel();
        TableColumn coluna1 = columnModelBusca.getColumn(0);
        coluna1.setPreferredWidth(50);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);

        TableColumn coluna3 = columnModelBusca.getColumn(2);
        coluna3.setCellRenderer(rightRenderer);;

        botao_limpaSort.setText("Limpar");
        botao_limpaSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_limpaSortActionPerformed(evt);
            }
        });

        botao_limpaCria.setText("Limpar");
        botao_limpaCria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_limpaCriaActionPerformed(evt);
            }
        });

        botao_limpaBusca.setText("Limpar");
        botao_limpaBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_limpaBuscaActionPerformed(evt);
            }
        });

        label_numElem1.setText("Ordenação:");

        scroll_sort.setViewportView(null);

        tabela_ordenacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Quant", "Tipo", "Tempo"
            }
        ));
        scroll_sort.setViewportView(tabela_ordenacao);
        TableColumnModel columnModelOrd = tabela_ordenacao.getColumnModel();
        TableColumn coluna1O = columnModelOrd.getColumn(0);
        coluna1O.setPreferredWidth(40);

        DefaultTableCellRenderer rightRendererO = new DefaultTableCellRenderer();
        rightRendererO.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);

        TableColumn coluna3O = columnModelOrd.getColumn(2);
        coluna3O.setCellRenderer(rightRendererO);;

        javax.swing.GroupLayout painel_tempoexecLayout = new javax.swing.GroupLayout(painel_tempoexec);
        painel_tempoexec.setLayout(painel_tempoexecLayout);
        painel_tempoexecLayout.setHorizontalGroup(
            painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel_tempoexecLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botao_limpaSort)
                    .addComponent(label_numElem1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_cria, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_numElem4)
                    .addComponent(botao_limpaCria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botao_limpaBusca)
                    .addComponent(scroll_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_numElem5))
                .addContainerGap())
        );
        painel_tempoexecLayout.setVerticalGroup(
            painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel_tempoexecLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painel_tempoexecLayout.createSequentialGroup()
                        .addComponent(label_numElem4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scroll_cria, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(painel_tempoexecLayout.createSequentialGroup()
                            .addComponent(label_numElem5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(scroll_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painel_tempoexecLayout.createSequentialGroup()
                            .addComponent(label_numElem1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scroll_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botao_limpaSort)
                    .addGroup(painel_tempoexecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botao_limpaBusca)
                        .addComponent(botao_limpaCria)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tab.addTab("Tempo de Execução", painel_tempoexec);

        label_numElem2.setText("Manipulação de índices:");

        scroll_visual.setViewportView(null);

        tabela_visual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Posição", "Valor"
            }
        ));
        scroll_visual.setViewportView(tabela_visual);
        TableColumnModel columnModelVisual = tabela_visual.getColumnModel();
        TableColumn coluna1Visual = columnModelVisual.getColumn(0);

        DefaultTableCellRenderer rendererVisual = new DefaultTableCellRenderer();
        rendererVisual.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        coluna1Visual.setCellRenderer(rendererVisual);

        botao_limpaVisual.setText("Limpar");
        botao_limpaVisual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_limpaVisualActionPerformed(evt);
            }
        });

        scroll_buscaPap.setToolTipText("");
        scroll_buscaPap.setRowHeaderView(null);

        tabela_pap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Iteração", "Valores"
            }
        ));
        tabela_pap.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        scroll_buscaPap.setViewportView(tabela_pap);
        TableColumnModel columnModelPap = tabela_pap.getColumnModel();
        TableColumn coluna1Pap = columnModelPap.getColumn(0);
        coluna1Pap.setPreferredWidth(60);

        DefaultTableCellRenderer rendererPap = new DefaultTableCellRenderer();
        rendererPap.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        TableColumn coluna2Pap = columnModelPap.getColumn(1);
        coluna1Pap.setCellRenderer(rendererPap);
        coluna2Pap.setCellRenderer(rendererPap);
        coluna2Pap.setPreferredWidth(450);

        label_numElem8.setText("Passo a Passo:");

        botao_limpaPap.setText("Limpar");
        botao_limpaPap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_limpaPapActionPerformed(evt);
            }
        });

        grupo_combo_pap.add(radio_bubble);
        radio_bubble.setText("Bubble Sort");
        radio_bubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_bubbleActionPerformed(evt);
            }
        });

        grupo_combo_pap.add(radio_selection);
        radio_selection.setText("Selection Sort");
        radio_selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_selectionActionPerformed(evt);
            }
        });

        grupo_combo_pap.add(radio_insertion);
        radio_insertion.setText("Insertion Sort");
        radio_insertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_insertionActionPerformed(evt);
            }
        });

        grupo_combo_pap.add(radio_quick);
        radio_quick.setText("Quick Sort");
        radio_quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_quickActionPerformed(evt);
            }
        });

        slider_velocidade.setMajorTickSpacing(5);
        slider_velocidade.setMaximum(900);
        slider_velocidade.setMinimum(50);

        jLabel2.setLabelFor(slider_velocidade);
        jLabel2.setText("Velocidade");

        jLabel3.setText("0.01x");

        jLabel4.setText("1x");

        botao_demonstrar.setText("Demonstrar");
        botao_demonstrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_demonstrarActionPerformed(evt);
            }
        });

        botao_cancelaVisual.setText("Parar");
        botao_cancelaVisual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_cancelaVisualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel_visualLayout = new javax.swing.GroupLayout(painel_visual);
        painel_visual.setLayout(painel_visualLayout);
        painel_visualLayout.setHorizontalGroup(
            painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painel_visualLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel_visualLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(59, 59, 59))
                    .addGroup(painel_visualLayout.createSequentialGroup()
                        .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slider_velocidade, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painel_visualLayout.createSequentialGroup()
                                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(radio_insertion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(radio_bubble, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radio_selection, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radio_quick, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(painel_visualLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botao_demonstrar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)))
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel_visualLayout.createSequentialGroup()
                        .addComponent(botao_limpaVisual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botao_cancelaVisual))
                    .addComponent(label_numElem2)
                    .addComponent(scroll_visual, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botao_limpaPap)
                    .addComponent(label_numElem8)
                    .addComponent(scroll_buscaPap, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        painel_visualLayout.setVerticalGroup(
            painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel_visualLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_numElem2)
                    .addComponent(label_numElem8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scroll_buscaPap, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scroll_visual, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addGroup(painel_visualLayout.createSequentialGroup()
                        .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio_bubble)
                            .addComponent(radio_selection))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio_insertion)
                            .addComponent(radio_quick))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(7, 7, 7)
                        .addComponent(slider_velocidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(botao_demonstrar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painel_visualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botao_limpaVisual)
                    .addComponent(botao_limpaPap)
                    .addComponent(botao_cancelaVisual))
                .addGap(19, 19, 19))
        );

        tab.addTab("Representação Visual", painel_visual);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(radio_lote)
                        .addGap(18, 18, 18)
                        .addComponent(radio_multi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tab)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(campo_num, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botao_gerar))
                            .addComponent(label_numElem)
                            .addComponent(check_ordenar)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(check_bubble, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(check_insertion, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(check_quick, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(check_selection, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(check_criaAVL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(check_criaBin, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(check_criaAVLAlt)
                                            .addComponent(check_criaBinAlt)))
                                    .addComponent(check_criaArvores)))
                            .addComponent(label_numElem6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(combo_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botao_busca)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_numElem)
                    .addComponent(label_numElem6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botao_gerar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campo_num, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botao_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(check_ordenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check_bubble)
                            .addComponent(check_selection))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check_insertion)
                            .addComponent(check_quick)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(check_criaArvores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_criaBinAlt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(check_criaAVLAlt))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_criaBin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(check_criaAVL)))))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(radio_lote)
                        .addComponent(radio_multi)))
                .addGap(18, 18, 18)
                .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 993, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void check_criaAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaAVLActionPerformed

    }//GEN-LAST:event_check_criaAVLActionPerformed

    private void check_ordenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_ordenarActionPerformed
        if (check_ordenar.isSelected())
            liberaOrdenas();
        else
            bloqueiaOrdenas();
    }//GEN-LAST:event_check_ordenarActionPerformed

    private void campo_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo_numActionPerformed

    private void botaoIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIniciarActionPerformed

        verificaOrdenar();
        verificaArvores();
        verificaProc();

        int numThreads = threadsSort.size() + threadsArvore.size();
        int progressoTotal = 0, cont = 1;
        barraProgresso.setValue(progressoTotal);

        if (proc_multi) {
            for (int i = 0; i < threadsSort.size(); i++) {
                Thread sort = threadsSort.get(i);
                System.out.println(sort);
                sort.start();
            }

            for (int i = 0; i < threadsSort.size(); i++) {
                Thread sort = threadsSort.get(i);

                try {
                    sort.join();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }

                double tempoExec;
                String nome = null, tempo = null, quant = null;

                switch (sort.getName()) {
                    case "ThreadBubble":
                        nome = "Bubble Sort";
                        tempo = String.valueOf(bubble.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadSelection":
                        nome = "Selection Sort";
                        tempo = String.valueOf(selection.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadInsertion":
                        nome = "Insertion Sort";
                        tempo = String.valueOf(insertion.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadQuick":
                        nome = "Quick Sort";
                        tempo = String.valueOf(quick.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                }

                modeloOrdenacao = (DefaultTableModel) tabela_ordenacao.getModel();
                modeloOrdenacao.addRow(new Object[]{quant, nome, tempo});

                JScrollBar verticalScrollBar = scroll_sort.getVerticalScrollBar();
                verticalScrollBar.setValue(verticalScrollBar.getMaximum());

                cont++;

                progressoTotal += 100 / numThreads;
                barraProgresso.setValue(progressoTotal);
            }

            for (int i = 0; i < threadsArvore.size(); i++) {
                Thread arvore = threadsArvore.get(i);
                System.out.println(arvore);
                arvore.start();
            }

            for (int i = 0; i < threadsArvore.size(); i++) {
                Thread arvore = threadsArvore.get(i);
                System.out.println(arvore);

                try {
                    arvore.join();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }

                double tempoExec;
                String nome = null, tempo = null, quant = null;

                switch (arvore.getName()) {
                    case "ThreadCriaArvBin":
                        nome = "Binaria";
                        tempo = String.valueOf(arvoreBin.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBinAlt":
                        nome = "Binaria Alt";
                        tempo = String.valueOf(arvoreBinAlt.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBal":
                        nome = "Balanceada";
                        tempo = String.valueOf(arvoreBal.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBalAlt":
                        nome = "Balanceada Alt ";
                        tempo = String.valueOf(arvoreBalAlt.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                }
                modeloCriaArvore = (DefaultTableModel) tabela_criaArv.getModel();
                modeloCriaArvore.addRow(new Object[]{quant, nome, tempo});

                JScrollBar verticalScrollBar = scroll_cria.getVerticalScrollBar();
                verticalScrollBar.setValue(verticalScrollBar.getMaximum());

                cont++;

                progressoTotal += 100 / numThreads;
                barraProgresso.setValue(progressoTotal);
            }
        } else if (!proc_multi) {
            for (int i = 0; i < threadsSort.size(); i++) {
                Thread sort = threadsSort.get(i);
                System.out.println(sort);

                sort.start();
                try {
                    sort.join();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }

                double tempoExec;
                String nome = null, tempo = null, quant = null;

                switch (sort.getName()) {
                    case "ThreadBubble":
                        nome = "Bubble Sort";
                        tempo = String.valueOf(bubble.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadSelection":
                        nome = "Selection Sort";
                        tempo = String.valueOf(selection.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadInsertion":
                        nome = "Insertion Sort";
                        tempo = String.valueOf(insertion.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadQuick":
                        nome = "Quick Sort";
                        tempo = String.valueOf(quick.getTempoExecucao()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                }
                modeloOrdenacao = (DefaultTableModel) tabela_ordenacao.getModel();
                modeloOrdenacao.addRow(new Object[]{quant, nome, tempo});

                JScrollBar verticalScrollBar = scroll_sort.getVerticalScrollBar();
                verticalScrollBar.setValue(verticalScrollBar.getMaximum());

                cont++;

                progressoTotal += 100 / numThreads;
                barraProgresso.setValue(progressoTotal);
            }

            for (int i = 0; i < threadsArvore.size(); i++) {
                Thread arvore = threadsArvore.get(i);
                System.out.println(arvore);
                arvore.start();
                try {
                    arvore.join();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }

                double tempoExec;
                String nome = null, tempo = null, quant = null;

                switch (arvore.getName()) {
                    case "ThreadCriaArvBin":
                        nome = "Binaria";
                        tempo = String.valueOf(arvoreBin.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBinAlt":
                        nome = "Binaria Alt";
                        tempo = String.valueOf(arvoreBinAlt.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBal":
                        nome = "Balanceada";
                        tempo = String.valueOf(arvoreBal.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                    case "ThreadCriaArvBalAlt":
                        nome = "Balanceada Alt ";
                        tempo = String.valueOf(arvoreBalAlt.getTempoCria()) + " ms";
                        quant = String.valueOf(vetor.getTamanho());
                        break;
                }
                modeloCriaArvore = (DefaultTableModel) tabela_criaArv.getModel();
                modeloCriaArvore.addRow(new Object[]{quant, nome, tempo});

                JScrollBar verticalScrollBar = scroll_cria.getVerticalScrollBar();
                verticalScrollBar.setValue(verticalScrollBar.getMaximum());

                cont++;

                progressoTotal += 100 / numThreads;
                barraProgresso.setValue(progressoTotal);
            }
        }


    }//GEN-LAST:event_botaoIniciarActionPerformed

    private void check_criaArvoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaArvoresActionPerformed
        if (check_criaArvores.isSelected())
            liberaArvores();
        else
            bloqueiaArvores();
    }//GEN-LAST:event_check_criaArvoresActionPerformed

    private void botaoIniciarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_botaoIniciarPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoIniciarPropertyChange

    private void botao_gerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_gerarActionPerformed
        gerarVetor();
        liberaResto();
        //vetor.imprimeVetor();

        bubble = new Sort(vetor);
        selection = new Sort(vetor);
        insertion = new Sort(vetor);
        quick = new Sort(vetor);

        bubblePap = new Sort(vetor);
        selectionPap = new Sort(vetor);
        insertionPap = new Sort(vetor);
        quickPap = new Sort(vetor);
    }//GEN-LAST:event_botao_gerarActionPerformed

    private void botao_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_buscaActionPerformed
        busca = new Busca();
        threadsBusca.clear();

        Thread buscaArvBin = new Thread(new BuscaArvBinThread(busca, arvoreBin, valorBusca));
        buscaArvBin.setName("ThreadBuscaArvBin");
        threadsBusca.add(buscaArvBin);

        Thread buscaArvBinAlt = new Thread(new BuscaArvBinAltThread(busca, arvoreBinAlt, valorBusca));
        buscaArvBinAlt.setName("ThreadBuscaArvBinAlt");
        threadsBusca.add(buscaArvBinAlt);

        Thread buscaArvBal = new Thread(new BuscaArvBalThread(busca, arvoreBal, valorBusca));
        buscaArvBal.setName("ThreadBuscaArvBal");
        threadsBusca.add(buscaArvBal);

        Thread buscaArvBalAlt = new Thread(new BuscaArvBalRuimThread(busca, arvoreBalAlt, valorBusca));
        buscaArvBalAlt.setName("ThreadBuscaArvBalAlt");
        threadsBusca.add(buscaArvBalAlt);

        for (int i = 0; i < threadsBusca.size(); i++) {
            Thread buscaf = threadsBusca.get(i);
            System.out.println(buscaf);
            buscaf.start();
            try {
                buscaf.join();
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            double tempoExec;
            String nome = null, tempo = null;

            switch (buscaf.getName()) {
                case "ThreadBuscaArvBin":
                    nome = "Binaria";
                    tempo = String.valueOf(busca.getTempoExecBin()) + " ms";
                    break;
                case "ThreadBuscaArvBinAlt":
                    nome = "Binaria Alt";
                    tempo = String.valueOf(busca.getTempoExecBinAlt()) + " ms";
                    break;
                case "ThreadBuscaArvBal":
                    nome = "Balanceada";
                    tempo = String.valueOf(busca.getTempoExecBal()) + " ms";
                    break;
                case "ThreadBuscaArvBalAlt":
                    nome = "Balanceada Alt";
                    tempo = String.valueOf(busca.getTempoExecBalAlt()) + " ms";
                    break;
            }
            modeloBusca = (DefaultTableModel) tabela_buscaArv.getModel();
            modeloBusca.addRow(new Object[]{selectedBusca.texto, nome, tempo});

            JScrollBar verticalScrollBar = scroll_busca.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMaximum());

        }
    }//GEN-LAST:event_botao_buscaActionPerformed


    private void combo_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_buscaActionPerformed
        selectedBusca = (Item) combo_busca.getSelectedItem();

        if (selectedBusca.texto == "Primeiro") {
            //selectedItem.setValor(vetor.getValor(0));
            valorBusca = vetor.getValor(0);
            System.out.println(valorBusca);
        } else if (selectedBusca.texto == "Último") {
            //selectedItem.setValor(vetor.getValor(0));
            valorBusca = vetor.getValor(vetor.getTamanho() - 1);
            System.out.println(valorBusca);
        } else if (selectedBusca.texto == "Menor") {
            //selectedItem.setValor(vetor.getValor(0));
            valorBusca = vetor.getMenor();
            System.out.println(valorBusca);
        } else if (selectedBusca.texto == "Maior") {
            //selectedItem.setValor(vetor.getValor(0));
            valorBusca = vetor.getMaior();
            System.out.println(valorBusca);
        } else if (selectedBusca.texto == "Nao possui") {
            //selectedItem.setValor(vetor.getValor(0));
            valorBusca = vetor.getNaoContem();
            System.out.println(valorBusca);
        }
    }//GEN-LAST:event_combo_buscaActionPerformed

    private void check_bubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_bubbleActionPerformed

    }//GEN-LAST:event_check_bubbleActionPerformed

    private void check_insertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_insertionActionPerformed

    }//GEN-LAST:event_check_insertionActionPerformed

    private void check_selectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_selectionActionPerformed

    }//GEN-LAST:event_check_selectionActionPerformed

    private void check_quickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_quickActionPerformed

    }//GEN-LAST:event_check_quickActionPerformed

    private void check_criaBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaBinActionPerformed

    }//GEN-LAST:event_check_criaBinActionPerformed

    private void check_criaBinAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaBinAltActionPerformed

    }//GEN-LAST:event_check_criaBinAltActionPerformed

    private void check_criaAVLAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaAVLAltActionPerformed

    }//GEN-LAST:event_check_criaAVLAltActionPerformed

    private void botao_limpaBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_limpaBuscaActionPerformed
        modeloBusca.setRowCount(0);
    }//GEN-LAST:event_botao_limpaBuscaActionPerformed

    private void botao_limpaCriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_limpaCriaActionPerformed
        modeloCriaArvore.setRowCount(0);
    }//GEN-LAST:event_botao_limpaCriaActionPerformed

    private void botao_limpaSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_limpaSortActionPerformed
        modeloOrdenacao.setRowCount(0);
    }//GEN-LAST:event_botao_limpaSortActionPerformed

    private void botao_limpaVisualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_limpaVisualActionPerformed
        modeloVisualOrdenacao.setRowCount(0);
    }//GEN-LAST:event_botao_limpaVisualActionPerformed

    private void botao_limpaPapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_limpaPapActionPerformed
        modeloPapOrdenacao.setRowCount(0);
    }//GEN-LAST:event_botao_limpaPapActionPerformed

    private void radio_bubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_bubbleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_bubbleActionPerformed

    private void radio_selectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_selectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_selectionActionPerformed

    private void radio_insertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_insertionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_insertionActionPerformed

    private void radio_quickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_quickActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_quickActionPerformed

    private void tabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabStateChanged
        int abaSelec = tab.getSelectedIndex();

        switch (abaSelec) {
            case 0:
                desbloqueiaSuperior();

                try {
                    bubblePap.setRegistrar(false);
                    selectionPap.setRegistrar(false);
                    insertionPap.setRegistrar(false);
                    quickPap.setRegistrar(false);
                } catch (NullPointerException ex) {
                    return;
                }
                break;
            case 1:
                bloqueiaSuperior();

                break;
            default:
        }    }//GEN-LAST:event_tabStateChanged

    private void botao_demonstrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_demonstrarActionPerformed
        bubblePap = new Sort(vetor);
        selectionPap = new Sort(vetor);
        insertionPap = new Sort(vetor);
        quickPap = new Sort(vetor);

        bubbleVisual = new Sort(vetor);
        selectionVisual = new Sort(vetor);
        insertionVisual = new Sort(vetor);
        quickVisual = new Sort(vetor);

        try {
            bubblePap.setRegistrar(true);
            selectionPap.setRegistrar(true);
            insertionPap.setRegistrar(true);
            quickPap.setRegistrar(true);
        } catch (NullPointerException ex) {
            return;
        }

        Runnable threadVisual = () -> {

            Enumeration<AbstractButton> buttons = grupo_combo_pap.getElements();
            while (buttons.hasMoreElements()) {
                AbstractButton button = buttons.nextElement();
                if (button.isSelected()) {
                    String buttonText = button.getText();

                    Thread bubbleVisualThread = new Thread(new BubbleSortThread(bubbleVisual));
                    bubbleVisualThread.setName("ThreadBubbleVisual");
                    Thread selectionVisualThread = new Thread(new SelectionSortThread(selectionVisual));
                    selectionVisualThread.setName("ThreadSelectionVisual");
                    Thread insertionVisualThread = new Thread(new InsertionSortThread(insertionVisual));
                    insertionVisualThread.setName("ThreadInsertionVisual");
                    Thread quickVisualThread = new Thread(new QuickSortThread(quickVisual));
                    quickVisualThread.setName("ThreadQuickVisual");

                    if (buttonText.equals("Bubble Sort")) {
                        modeloVisualOrdenacao = (DefaultTableModel) tabela_visual.getModel();
                        bubbleVisual.ordenaBubbleAnim();
                    } else if (buttonText.equals("Selection Sort")) {
                        modeloVisualOrdenacao = (DefaultTableModel) tabela_visual.getModel();
                        selectionVisual.ordenaSelectionAnim();
                    } else if (buttonText.equals("Insertion Sort")) {
                        modeloVisualOrdenacao = (DefaultTableModel) tabela_visual.getModel();
                        insertionVisual.ordenaInsertionAnim();
                    } else if (buttonText.equals("Quick Sort")) {
                        modeloVisualOrdenacao = (DefaultTableModel) tabela_visual.getModel();
                        quickVisual.ordenaQuickAnim();
                    }
                }
            }
        };

        Runnable threadPap = () -> {
            Enumeration<AbstractButton> buttons = grupo_combo_pap.getElements();
            while (buttons.hasMoreElements()) {
                AbstractButton button = buttons.nextElement();
                if (button.isSelected()) {
                    String buttonText = button.getText();

                    Thread bubblePapThread = new Thread(new BubbleSortThread(bubblePap));
                    bubblePapThread.setName("ThreadBubblePap");
                    Thread selectionPapThread = new Thread(new SelectionSortThread(selectionPap));
                    selectionPapThread.setName("ThreadSelectionPap");
                    Thread insertionPapThread = new Thread(new InsertionSortThread(insertionPap));
                    insertionPapThread.setName("ThreadInsertionPap");
                    Thread quickPapThread = new Thread(new QuickSortThread(quickPap));
                    quickPapThread.setName("ThreadQuickPap");

                    if (buttonText.equals("Bubble Sort")) {
                        bubblePapThread.start();

                        try {
                            bubblePapThread.join();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        String it = null, reg = null;
                        for (int i = 0; i < bubblePap.registros.size(); i++) {
                            reg = bubblePap.registros.get(i);
                            it = String.valueOf(i);

                            //System.out.println(it + " " + reg);
                            modeloPapOrdenacao = (DefaultTableModel) tabela_pap.getModel();
                            modeloPapOrdenacao.addRow(new Object[]{it, reg});

                        }
                    } else if (buttonText.equals("Selection Sort")) {
                        selectionPapThread.start();

                        try {
                            selectionPapThread.join();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        String it = null, reg = null;
                        for (int i = 0; i < selectionPap.registros.size(); i++) {
                            reg = selectionPap.registros.get(i);
                            it = String.valueOf(i);

                            //System.out.println(it + " " + reg);
                            modeloPapOrdenacao = (DefaultTableModel) tabela_pap.getModel();
                            modeloPapOrdenacao.addRow(new Object[]{it, reg});

                        }
                    } else if (buttonText.equals("Insertion Sort")) {
                        insertionPapThread.start();

                        try {
                            insertionPapThread.join();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        String it = null, reg = null;
                        for (int i = 0; i < insertionPap.registros.size(); i++) {
                            reg = insertionPap.registros.get(i);
                            it = String.valueOf(i);

                            //System.out.println(it + " " + reg);
                            modeloPapOrdenacao = (DefaultTableModel) tabela_pap.getModel();
                            modeloPapOrdenacao.addRow(new Object[]{it, reg});

                        }
                    } else if (buttonText.equals("Quick Sort")) {
                        quickPapThread.start();

                        try {
                            quickPapThread.join();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        String it = null, reg = null;
                        for (int i = 0; i < quickPap.registros.size(); i++) {
                            reg = quickPap.registros.get(i);
                            it = String.valueOf(i);

                            System.out.println(it + " " + reg);

                            modeloPapOrdenacao = (DefaultTableModel) tabela_pap.getModel();
                            modeloPapOrdenacao.addRow(new Object[]{it, reg});

                        }
                    }
                }
            }

        };

        ThreadVisual = new Thread(threadVisual);
        ThreadVisual.setName("ThreadVisual");
        ThreadVisual.start();

        ThreadPap = new Thread(threadPap);
        ThreadPap.setName("ThreadPap");
        ThreadPap.start();

        /*try {
            PapThread.join();
            VisualThread.join();
        } catch (InterruptedException ex) {

        }*/

    }//GEN-LAST:event_botao_demonstrarActionPerformed

    private void botao_cancelaVisualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_cancelaVisualActionPerformed
        
    }//GEN-LAST:event_botao_cancelaVisualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Janela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton botaoIniciar;
    private javax.swing.JButton botao_busca;
    private javax.swing.JButton botao_cancelaVisual;
    private javax.swing.JButton botao_demonstrar;
    private javax.swing.JButton botao_gerar;
    private javax.swing.JButton botao_limpaBusca;
    private javax.swing.JButton botao_limpaCria;
    private javax.swing.JButton botao_limpaPap;
    private javax.swing.JButton botao_limpaSort;
    private javax.swing.JButton botao_limpaVisual;
    private javax.swing.JTextField campo_num;
    private javax.swing.JCheckBox check_bubble;
    private javax.swing.JCheckBox check_criaAVL;
    private javax.swing.JCheckBox check_criaAVLAlt;
    private javax.swing.JCheckBox check_criaArvores;
    private javax.swing.JCheckBox check_criaBin;
    private javax.swing.JCheckBox check_criaBinAlt;
    private javax.swing.JCheckBox check_insertion;
    private javax.swing.JCheckBox check_ordenar;
    private javax.swing.JCheckBox check_quick;
    private javax.swing.JCheckBox check_selection;
    private javax.swing.JComboBox<Item> combo_busca;
    private javax.swing.ButtonGroup grupo_combo_pap;
    private javax.swing.ButtonGroup grupo_combo_proc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel label_numElem;
    private javax.swing.JLabel label_numElem1;
    private javax.swing.JLabel label_numElem2;
    private javax.swing.JLabel label_numElem4;
    private javax.swing.JLabel label_numElem5;
    private javax.swing.JLabel label_numElem6;
    private javax.swing.JLabel label_numElem8;
    private javax.swing.JPanel painel_tempoexec;
    private javax.swing.JPanel painel_visual;
    private javax.swing.JRadioButton radio_bubble;
    private javax.swing.JRadioButton radio_insertion;
    private javax.swing.JRadioButton radio_lote;
    private javax.swing.JRadioButton radio_multi;
    private javax.swing.JRadioButton radio_quick;
    private javax.swing.JRadioButton radio_selection;
    private javax.swing.JScrollPane scroll_busca;
    private javax.swing.JScrollPane scroll_buscaPap;
    private javax.swing.JScrollPane scroll_cria;
    private javax.swing.JScrollPane scroll_sort;
    private javax.swing.JScrollPane scroll_visual;
    private static javax.swing.JSlider slider_velocidade;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JTable tabela_buscaArv;
    private javax.swing.JTable tabela_criaArv;
    private javax.swing.JTable tabela_ordenacao;
    private javax.swing.JTable tabela_pap;
    private javax.swing.JTable tabela_visual;
    // End of variables declaration//GEN-END:variables

    private void liberaOrdenas() {
        check_bubble.setEnabled(true);
        check_selection.setEnabled(true);
        check_insertion.setEnabled(true);
        check_quick.setEnabled(true);

    }

    private void bloqueiaOrdenas() {
        check_bubble.setEnabled(false);
        check_bubble.setSelected(false);

        check_selection.setEnabled(false);
        check_selection.setSelected(false);

        check_insertion.setEnabled(false);
        check_insertion.setSelected(false);

        check_quick.setEnabled(false);
        check_quick.setSelected(false);

    }

    private void liberaArvores() {
        check_criaBin.setEnabled(true);
        check_criaAVL.setEnabled(true);
        check_criaAVLAlt.setEnabled(true);
        check_criaBinAlt.setEnabled(true);

    }

    private void bloqueiaArvores() {
        check_criaBin.setEnabled(false);
        check_criaBin.setSelected(false);

        check_criaAVL.setEnabled(false);
        check_criaAVL.setSelected(false);

        check_criaAVLAlt.setEnabled(false);
        check_criaAVLAlt.setSelected(false);

        check_criaBinAlt.setEnabled(false);
        check_criaBinAlt.setSelected(false);

    }

    private void liberaResto() {
        check_ordenar.setEnabled(true);
        check_criaArvores.setEnabled(true);
        combo_busca.setEnabled(true);
    }

    private void desbloqueiaSuperior() {
        //check_ordenar.setEnabled(true);
        //check_criaArvores.setEnabled(false);
        botaoIniciar.setEnabled(true);
        if (vetor != null) {
            check_ordenar.setEnabled(true);
            check_criaArvores.setEnabled(true);

        }

    }

    private void bloqueiaSuperior() {
        bloqueiaOrdenas();
        bloqueiaArvores();
        check_criaArvores.setEnabled(false);
        check_criaArvores.setSelected(false);
        check_ordenar.setEnabled(false);
        check_ordenar.setSelected(false);
        botaoIniciar.setEnabled(false);
    }

    private void gerarVetor() {
        String tamanhoVetor = campo_num.getText();
        try {
            // Converte a string para um número inteiro
            int tamanho = Integer.parseInt(tamanhoVetor);

            // Cria o vetor com o tamanho especificado
            vetor = new Vetor(tamanho);
            geraVetor = new Thread(new geraVetorThread(vetor));
            geraVetor.setName("ThreadGeraVetor");

            geraVetor.start();
        } catch (NumberFormatException ex) {
            // Trate possíveis erros de conversão
            JOptionPane.showMessageDialog(null, "Por favor, insira um número válido.");
        }

        try {
            geraVetor.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void verificaOrdenar() {
        threadsSort.clear();

        if (check_bubble.isSelected()) {
            Thread bubbleThread = new Thread(new BubbleSortThread(bubble));
            bubbleThread.setName("ThreadBubble");
            threadsSort.add(bubbleThread);
        }
        if (check_selection.isSelected()) {
            Thread selectionThread = new Thread(new SelectionSortThread(selection));
            selectionThread.setName("ThreadSelection");
            threadsSort.add(selectionThread);
        }
        if (check_insertion.isSelected()) {
            Thread insertionThread = new Thread(new InsertionSortThread(insertion));

            insertionThread.setName("ThreadInsertion");
            threadsSort.add(insertionThread);
        }
        if (check_quick.isSelected()) {
            Thread quickThread = new Thread(new QuickSortThread(quick));

            quickThread.setName("ThreadQuick");
            threadsSort.add(quickThread);

        }
    }

    private void verificaArvores() {

        threadsArvore.clear();

        //THREADS ARVORES
        if (check_criaBin.isSelected()) {
            Thread criaArvBin = new Thread(new criaArvBinThread(arvoreBin, vetor));
            criaArvBin.setName("ThreadCriaArvBin");
            threadsArvore.add(criaArvBin);
            botao_busca.setEnabled(true);

        }

        if (check_criaBinAlt.isSelected()) {
            Thread criaArvBinAlt = new Thread(new criaArvBinAltThread(arvoreBinAlt, vetor));
            criaArvBinAlt.setName("ThreadCriaArvBinAlt");
            threadsArvore.add(criaArvBinAlt);
            botao_busca.setEnabled(true);

        }

        if (check_criaAVL.isSelected()) {
            Thread criaArvBal = new Thread(new criaArvBalThread(arvoreBal, vetor));
            criaArvBal.setName("ThreadCriaArvBal");
            threadsArvore.add(criaArvBal);
            botao_busca.setEnabled(true);
        }

        if (check_criaAVLAlt.isSelected()) {
            Thread criaArvBalAlt = new Thread(new criaArvBalRuimThread(arvoreBalAlt, vetor));
            criaArvBalAlt.setName("ThreadCriaArvBalAlt");
            threadsArvore.add(criaArvBalAlt);
            botao_busca.setEnabled(true);

        }

        //THREADS ORDENACAO
    }

    private void liberaBusca() {
        botao_busca.setEnabled(true);
    }

    private void verificaProc() {
        if (radio_lote.isSelected()) {
            proc_multi = false;
        } else if (radio_multi.isSelected()) {
            proc_multi = true;
        }
    }

    public class Item {

        private String texto;
        public double valor;
        private int quant;

        public Item(int quant, String texto, double valor) {
            this.texto = texto;
            this.valor = valor;
            this.quant = quant;
        }

        @Override
        public String toString() {
            return texto;
        }

        public double getValor() {
            return valor;
        }

        public void setValor(double valor) {
            this.valor = valor;
        }

    }

    static public void atualizaVetorVisual(Sort sort) {
        modeloVisualOrdenacao.setRowCount(0);

        vetorSort = new int[sort.getVetor().length];

        for (int i = 0; i < vetorSort.length; i++) {
            vetorSort[i] = (int) sort.getVetor()[i];
        }

        for (int i = 0; i < vetorSort.length; i++) {
            modeloVisualOrdenacao.addRow(new Object[]{String.valueOf(i), String.valueOf(vetorSort[i])});
        }
    }
    
    static public int getTempoAnim(){
        int tempo = 1000 - (slider_velocidade.getValue());
        //System.out.println(tempo);
        return tempo;
    }
}
