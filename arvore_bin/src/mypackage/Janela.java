/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mypackage;

import arvores.ArvoreAvl;
import arvores.ArvoreAvlAlt;
import arvores.ArvoreBinaria;
import arvores.ArvoreBinariaAlt;
import estuturas_simples.Sort;
import estuturas_simples.Vetor;
import estuturas_simples.Cores;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lab8309
 */
public class Janela extends javax.swing.JFrame {

    /**
     * Creates new form Janela
     */
    public Janela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    List<Thread> threadsSort = new ArrayList<>();
    List<Thread> threadsArvore = new ArrayList<>();

    Vetor vetor = null;
    Thread geraVetor = null;

    ArvoreBinaria arvoreBin = new ArvoreBinaria();
    ArvoreBinariaAlt arvoreBinAlt = new ArvoreBinariaAlt();
    ArvoreAvl arvoreBal = new ArvoreAvl();
    ArvoreAvlAlt arvoreBalAlt = new ArvoreAvlAlt();

    Sort bubble = null;
    Sort selection = null;
    Sort insertion = null;
    Sort quick = null;


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botaoIniciar = new javax.swing.JButton();
        check_ordenar = new javax.swing.JCheckBox();
        check_bubble = new javax.swing.JCheckBox();
        check_selection = new javax.swing.JCheckBox();
        check_insertion = new javax.swing.JCheckBox();
        check_quick = new javax.swing.JCheckBox();
        check_criaArvores = new javax.swing.JCheckBox();
        check_criaBin = new javax.swing.JCheckBox();
        check_criaAVL = new javax.swing.JCheckBox();
        check_criaAVLAlt = new javax.swing.JCheckBox();
        check_criaBinAlt = new javax.swing.JCheckBox();
        label_numElem = new javax.swing.JLabel();
        campo_num = new javax.swing.JTextField();
        botao_gerar = new javax.swing.JButton();
        label_numElem1 = new javax.swing.JLabel();
        scroll_sort = new javax.swing.JScrollPane();
        tabela_ordenacao = new javax.swing.JTable();
        label_numElem4 = new javax.swing.JLabel();
        scroll_cria = new javax.swing.JScrollPane();
        tabela_criaArv = new javax.swing.JTable();
        label_numElem5 = new javax.swing.JLabel();
        scroll_busca = new javax.swing.JScrollPane();
        tabela_buscaArv = new javax.swing.JTable();
        barraProgresso = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        label_numElem6 = new javax.swing.JLabel();
        botao_ok1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));

        botaoIniciar.setText("Iniciar");
        botaoIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIniciarActionPerformed(evt);
            }
        });
        botaoIniciar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                botaoIniciarPropertyChange(evt);
            }
        });

        check_ordenar.setText("Ordenar");
        check_ordenar.setEnabled(false);
        check_ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_ordenarActionPerformed(evt);
            }
        });

        check_bubble.setText("Bubble Sort");
        check_bubble.setEnabled(false);
        check_bubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_bubbleActionPerformed(evt);
            }
        });

        check_selection.setText("Selection Sort");
        check_selection.setEnabled(false);
        check_selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_selectionActionPerformed(evt);
            }
        });

        check_insertion.setText("Insertion Sort");
        check_insertion.setEnabled(false);
        check_insertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_insertionActionPerformed(evt);
            }
        });

        check_quick.setText("Quick Sort");
        check_quick.setEnabled(false);
        check_quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_quickActionPerformed(evt);
            }
        });

        check_criaArvores.setText("Criar árvores");
        check_criaArvores.setEnabled(false);
        check_criaArvores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaArvoresActionPerformed(evt);
            }
        });

        check_criaBin.setText("Binária (Bianchi)");
        check_criaBin.setEnabled(false);
        check_criaBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaBinActionPerformed(evt);
            }
        });

        check_criaAVL.setText("Balanceada AVL (Bianchi)");
        check_criaAVL.setEnabled(false);
        check_criaAVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaAVLActionPerformed(evt);
            }
        });

        check_criaAVLAlt.setText("Balanceada AVL (Autor Desconhecido)");
        check_criaAVLAlt.setEnabled(false);
        check_criaAVLAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaAVLAltActionPerformed(evt);
            }
        });

        check_criaBinAlt.setText("Binária (Autor Desconhecido)");
        check_criaBinAlt.setEnabled(false);
        check_criaBinAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_criaBinAltActionPerformed(evt);
            }
        });

        label_numElem.setText("Número de elementos:");

        campo_num.setToolTipText("");
        campo_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo_numActionPerformed(evt);
            }
        });

        botao_gerar.setText("Gerar");
        botao_gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_gerarActionPerformed(evt);
            }
        });

        label_numElem1.setText("Ordenação:");

        scroll_sort.setViewportView(null);

        tabela_ordenacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Tipo", "Tempo"
            }
        ));
        scroll_sort.setViewportView(tabela_ordenacao);

        label_numElem4.setText("Criação da árvore:");

        tabela_criaArv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Tipo", "Tempo"
            }
        ));
        scroll_cria.setViewportView(tabela_criaArv);
        if (tabela_criaArv.getColumnModel().getColumnCount() > 0) {
            tabela_criaArv.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            tabela_criaArv.getColumnModel().getColumn(1).setHeaderValue("Title 2");
        }

        label_numElem5.setText("Busca na árvore:");

        tabela_buscaArv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Tipo", "Tempo"
            }
        ));
        scroll_busca.setViewportView(tabela_buscaArv);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        label_numElem6.setText("Buscar elemento:");

        botao_ok1.setText("Buscar");
        botao_ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_ok1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aleatório", "Menor", "Maior", "Primeiro", "Último" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(campo_num, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botao_gerar)
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_numElem6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botao_ok1))))
                    .addComponent(label_numElem)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check_insertion)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(check_ordenar)
                                .addComponent(check_bubble, javax.swing.GroupLayout.Alignment.CENTER)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check_quick)
                            .addComponent(check_selection))
                        .addGap(26, 26, 26)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check_criaArvores)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(check_criaAVL)
                                    .addComponent(check_criaBin))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(check_criaAVLAlt)
                                    .addComponent(check_criaBinAlt)))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(botaoIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(label_numElem1))
                                .addComponent(scroll_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(label_numElem4))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(scroll_cria, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(label_numElem5))
                                .addComponent(scroll_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_numElem)
                    .addComponent(label_numElem6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botao_gerar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campo_num, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botao_ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check_ordenar)
                            .addComponent(check_criaArvores))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(check_bubble)
                                    .addComponent(check_selection))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(check_insertion)
                                    .addComponent(check_quick)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(check_criaBinAlt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(check_criaAVLAlt))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(check_criaBin)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(check_criaAVL)))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(label_numElem4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scroll_cria, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(label_numElem5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(scroll_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(label_numElem1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(scroll_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void check_criaAVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaAVLActionPerformed

    }//GEN-LAST:event_check_criaAVLActionPerformed

    private void check_ordenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_ordenarActionPerformed
        if (check_ordenar.isSelected())
            liberaOrdenas();
        else
            bloqueiaOrdenas();
    }//GEN-LAST:event_check_ordenarActionPerformed

    private void campo_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo_numActionPerformed

    private void botaoIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIniciarActionPerformed

        verificaOrdenar();
        verificaArvores();

        int numThreads = threadsSort.size() + threadsArvore.size();
        int progressoTotal = 0, cont = 1;
        barraProgresso.setValue(progressoTotal);

        for (int i = 0; i < threadsSort.size(); i++) {
            Thread sort = threadsSort.get(i);
            System.out.println(sort);
            sort.start();
            try {
                sort.join();
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            double tempoExec;
            String nome = null, tempo = null;

            switch (sort.getName()) {
                case "ThreadBubble":
                    nome = "Bubble Sort";
                    tempo = String.valueOf(bubble.getTempoExecucao()) + " ms";
                    break;
                case "ThreadSelection":
                    nome = "Selection Sort";
                    tempo = String.valueOf(selection.getTempoExecucao()) + " ms";
                    break;
                case "ThreadInsertion":
                    nome = "Insertion Sort";
                    tempo = String.valueOf(insertion.getTempoExecucao()) + " ms";
                    break;
                case "ThreadQuick":
                    nome = "Quick Sort";
                    tempo = String.valueOf(quick.getTempoExecucao()) + " ms";
                    break;
            }
            DefaultTableModel modeloOrdenacao = (DefaultTableModel) tabela_ordenacao.getModel();
            modeloOrdenacao.addRow(new Object[]{nome, tempo});

            JScrollBar verticalScrollBar = scroll_sort.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMaximum());

            cont++;

            progressoTotal += 100 / numThreads;
            barraProgresso.setValue(progressoTotal);
        }

        for (int i = 0; i < threadsArvore.size(); i++) {
            Thread arvore = threadsArvore.get(i);
            System.out.println(arvore);
            arvore.start();
            try {
                arvore.join();
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            double tempoExec;
            String nome = null, tempo = null;

            switch (arvore.getName()) {
                case "ThreadCriaArvBin":
                    nome = "Binaria";
                    tempo = String.valueOf(arvoreBin.getTempoCria()) + " ms";
                    break;
                case "ThreadCriaArvBinAlt":
                    nome = "Binaria Alt";
                    tempo = String.valueOf(arvoreBinAlt.getTempoCria()) + " ms";
                    break;
                case "ThreadCriaArvBal":
                    nome = "Balanceada";
                    tempo = String.valueOf(arvoreBal.getTempoCria()) + " ms";
                    break;
                case "ThreadCriaArvBalAlt":
                    nome = "Balanceada Alt ";
                    tempo = String.valueOf(arvoreBalAlt.getTempoCria()) + " ms";
                    break;
            }
            DefaultTableModel modeloCriaArvore = (DefaultTableModel) tabela_criaArv.getModel();
            modeloCriaArvore.addRow(new Object[]{nome, tempo});

            JScrollBar verticalScrollBar = scroll_cria.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMaximum());

            cont++;

            progressoTotal += 100 / numThreads;
            barraProgresso.setValue(progressoTotal);
        }
    }//GEN-LAST:event_botaoIniciarActionPerformed

    private void check_criaArvoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaArvoresActionPerformed
        if (check_criaArvores.isSelected())
            liberaArvores();
        else
            bloqueiaArvores();
    }//GEN-LAST:event_check_criaArvoresActionPerformed

    private void botaoIniciarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_botaoIniciarPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoIniciarPropertyChange

    private void botao_gerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_gerarActionPerformed
        gerarVetor();
        liberaResto();

        /*A partir daqui, serão iniciadas as criações e feitas */
        //CRIA ORDENACOES
        bubble = new Sort(vetor);
        selection = new Sort(vetor);
        insertion = new Sort(vetor);
        quick = new Sort(vetor);

        /*bubbleThread.start();
        insertionThread.start();
        selectionThread.start();
        quickThread.start();
        criaArvBal.start();
        criaArvBinAlt.start();
        criaArvBin.start();
        criaArvBalAlt.start();*/
    }//GEN-LAST:event_botao_gerarActionPerformed

    private void botao_ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_ok1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botao_ok1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void check_bubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_bubbleActionPerformed

    }//GEN-LAST:event_check_bubbleActionPerformed

    private void check_insertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_insertionActionPerformed

    }//GEN-LAST:event_check_insertionActionPerformed

    private void check_selectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_selectionActionPerformed

    }//GEN-LAST:event_check_selectionActionPerformed

    private void check_quickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_quickActionPerformed

    }//GEN-LAST:event_check_quickActionPerformed

    private void check_criaBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaBinActionPerformed

    }//GEN-LAST:event_check_criaBinActionPerformed

    private void check_criaBinAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaBinAltActionPerformed

    }//GEN-LAST:event_check_criaBinAltActionPerformed

    private void check_criaAVLAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_criaAVLAltActionPerformed

    }//GEN-LAST:event_check_criaAVLAltActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Janela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton botaoIniciar;
    private javax.swing.JButton botao_gerar;
    private javax.swing.JButton botao_ok1;
    private javax.swing.JTextField campo_num;
    private javax.swing.JCheckBox check_bubble;
    private javax.swing.JCheckBox check_criaAVL;
    private javax.swing.JCheckBox check_criaAVLAlt;
    private javax.swing.JCheckBox check_criaArvores;
    private javax.swing.JCheckBox check_criaBin;
    private javax.swing.JCheckBox check_criaBinAlt;
    private javax.swing.JCheckBox check_insertion;
    private javax.swing.JCheckBox check_ordenar;
    private javax.swing.JCheckBox check_quick;
    private javax.swing.JCheckBox check_selection;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel label_numElem;
    private javax.swing.JLabel label_numElem1;
    private javax.swing.JLabel label_numElem4;
    private javax.swing.JLabel label_numElem5;
    private javax.swing.JLabel label_numElem6;
    private javax.swing.JScrollPane scroll_busca;
    private javax.swing.JScrollPane scroll_cria;
    private javax.swing.JScrollPane scroll_sort;
    private javax.swing.JTable tabela_buscaArv;
    private javax.swing.JTable tabela_criaArv;
    private javax.swing.JTable tabela_ordenacao;
    // End of variables declaration//GEN-END:variables

    private void liberaOrdenas() {
        check_bubble.setEnabled(true);
        check_selection.setEnabled(true);
        check_insertion.setEnabled(true);
        check_quick.setEnabled(true);

    }

    private void bloqueiaOrdenas() {
        check_bubble.setEnabled(false);
        check_bubble.setSelected(false);

        check_selection.setEnabled(false);
        check_selection.setSelected(false);

        check_insertion.setEnabled(false);
        check_insertion.setSelected(false);

        check_quick.setEnabled(false);
        check_quick.setSelected(false);

    }

    private void liberaArvores() {
        check_criaBin.setEnabled(true);
        check_criaAVL.setEnabled(true);
        check_criaAVLAlt.setEnabled(true);
        check_criaBinAlt.setEnabled(true);

    }

    private void bloqueiaArvores() {
        check_criaBin.setEnabled(false);
        check_criaBin.setSelected(false);

        check_criaAVL.setEnabled(false);
        check_criaAVL.setSelected(false);

        check_criaAVLAlt.setEnabled(false);
        check_criaAVLAlt.setSelected(false);

        check_criaBinAlt.setEnabled(false);
        check_criaBinAlt.setSelected(false);

    }

    private void liberaResto() {
        check_ordenar.setEnabled(true);
        check_criaArvores.setEnabled(true);
    }

    private void gerarVetor() {
        String tamanhoVetor = campo_num.getText();
        try {
            // Converte a string para um número inteiro
            int tamanho = Integer.parseInt(tamanhoVetor);

            // Cria o vetor com o tamanho especificado
            vetor = new Vetor(tamanho);
            geraVetor = new Thread(new geraVetorThread(vetor));
            geraVetor.setName("ThreadGeraVetor");

            geraVetor.start();
        } catch (NumberFormatException ex) {
            // Trate possíveis erros de conversão
            JOptionPane.showMessageDialog(null, "Por favor, insira um número válido.");
        }

        try {
            geraVetor.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void verificaOrdenar() {
        threadsSort.clear();

        if (check_bubble.isSelected()) {
            Thread bubbleThread = new Thread(new BubbleSortThread(bubble));
            bubbleThread.setName("ThreadBubble");
            threadsSort.add(bubbleThread);
        }
        if (check_selection.isSelected()) {
            Thread selectionThread = new Thread(new SelectionSortThread(selection));
            selectionThread.setName("ThreadSelection");
            threadsSort.add(selectionThread);
        }
        if (check_insertion.isSelected()) {
            Thread insertionThread = new Thread(new InsertionSortThread(insertion));

            insertionThread.setName("ThreadInsertion");
            threadsSort.add(insertionThread);
        }
        if (check_quick.isSelected()) {
            Thread quickThread = new Thread(new QuickSortThread(quick));

            quickThread.setName("ThreadQuick");
            threadsSort.add(quickThread);

        }
    }

    private void verificaArvores() {

        threadsArvore.clear();

        //THREADS ARVORES
        if (check_criaBin.isSelected()) {
            Thread criaArvBin = new Thread(new criaArvBinThread(arvoreBin, vetor));
            criaArvBin.setName("ThreadCriaArvBin");
            threadsArvore.add(criaArvBin);
        }

        if (check_criaBinAlt.isSelected()) {
            Thread criaArvBinAlt = new Thread(new criaArvBinAltThread(arvoreBinAlt, vetor));
            criaArvBinAlt.setName("ThreadCriaArvBinAlt");
            threadsArvore.add(criaArvBinAlt);
        }

        if (check_criaAVLAlt.isSelected()) {
            Thread criaArvBalAlt = new Thread(new criaArvBalRuimThread(arvoreBalAlt, vetor));
            criaArvBalAlt.setName("ThreadCriaArvBalAlt");
            threadsArvore.add(criaArvBalAlt);
        }

        if (check_criaAVL.isSelected()) {
            Thread criaArvBal = new Thread(new criaArvBalThread(arvoreBal, vetor));
            criaArvBal.setName("ThreadCriaArvBal");
            threadsArvore.add(criaArvBal);
        }

        //THREADS ORDENACAO
    }
}
